{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Trdelnik","text":""},{"location":"#trdelnik","title":"Trdelnik","text":"<p>developed by Ackee Blockchain</p> <p>Trdeln\u00edk is a Rust-based testing framework providing several convenient developer tools for testing Solana programs written in Anchor.</p> <ul> <li>Trdelnik fuzz - property-based and stateful testing;</li> <li>Trdelnik client - build and deploy your Anchor program to a local cluster;</li> <li>Trdelnik test - run your integration tests on a local validator;</li> <li>Trdelnik explorer - exploring ledger changes.</li> </ul>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li> Q1/22 Trdelnik announcement at Solana Hacker House Prague<ul> <li> Trdelnik client available for testing</li> </ul> </li> <li> Q2/22 Trdelnik explorer available</li> <li> Q2/22 Trdelnik client and explorer introduced at Solana Hacker House Barcelona</li> <li> Q3/23 Trdelnik fuzz introduced at Solana Hacker House Berlin</li> </ul>"},{"location":"#awards","title":"Awards","text":"<p>Marinade Community Prize - winner of the Marinade grant for the 2022 Solana Riptide Hackathon.</p>"},{"location":"#university-and-investment-partners","title":"University and investment partners","text":"<ul> <li>Czech technical university in Prague</li> <li>Ackee</li> <li>Rockaway Blockchain Fund</li> </ul>"},{"location":"fuzzing/fuzzing-current-limitations/","title":"Current limitations","text":"<p>This section summarizes some known limitations in the current development stage. Further development will be focused on resolving these limitations.</p> <ul> <li>Only fuzzing of one program without CPIs to other custom programs is supported.</li> <li>Remaining accounts in check methods are not supported.</li> </ul>"},{"location":"fuzzing/fuzzing-examples/","title":"Examples","text":"<ul> <li>Fuzz test example 0</li> <li>Fuzz test example 1</li> <li>Fuzz test example 2</li> <li>Fuzz test example 3</li> </ul>"},{"location":"fuzzing/fuzzing-howto/","title":"HowTo write Fuzz Tests","text":"<p>At the current development stage, there are some manual steps required to make your fuzz test compile:</p> <ol> <li>Add dependencies specific to your program to <code>trdelnik-tests/fuzz_tests/Cargo.toml</code> (such as anchor-spl etc.).</li> <li>Add necessary <code>use</code> statements into <code>trdelnik-tests/fuzz_tests/&lt;FUZZ_TEST_NAME&gt;/accounts_snapshots.rs</code> to import missing types.</li> </ol>"},{"location":"fuzzing/fuzzing-howto/#specify-accounts-to-reuse","title":"Specify accounts to reuse","text":"<p>Trdelnik fuzzer helps you to generate only a limited amount of pseudo-random accounts and reuse them in the instructions. Always generating only random accounts would in most cases lead to a situation where the fuzzer would be stuck because the accounts would be almost every time rejected by your Anchor program. Therefore it is necessary to specify, what accounts should be used and also limit the number of newly created accounts to reduce the space complexity.</p> <p>Go to the <code>trdelnik-tests/fuzz_tests/&lt;FUZZ_TEST_NAME&gt;/fuzz_instructions.rs</code> file and complete the pre-generated <code>FuzzAccounts</code> structure. It contains all accounts used in your program. You have to determine, if the account is a signer, a PDA, a token account or program account. Than use the corresponding <code>AccountsStorage</code> types such as:</p> <pre><code>pub struct FuzzAccounts {\n    signer: AccountsStorage&lt;Keypair&gt;,\n    some_pda: AccountsStorage&lt;PdaStore&gt;,\n    token_vault: AccountsStorage&lt;TokenStore&gt;,\n    mint: AccountsStorage&lt;MintStore&gt;,\n}\n</code></pre>"},{"location":"fuzzing/fuzzing-howto/#specify-instruction-data","title":"Specify instruction data","text":"<p>Trdelnik fuzzer generates random instruction data for you. Currently it is however required, that you manually assign the random fuzzer data to the instruction data. It is done using the <code>IxOps</code> trait and its method <code>get_data</code>. Go to the <code>trdelnik-tests/fuzz_tests/&lt;FUZZ_TEST_NAME&gt;/fuzz_instructions.rs</code> file and complete the pre-generated <code>get_data</code> methods for each instruction such as:</p> <pre><code>fn get_data(\n    &amp;self,\n    _client: &amp;mut impl FuzzClient,\n    _fuzz_accounts: &amp;mut FuzzAccounts,\n) -&gt; Result&lt;Self::IxData, FuzzingError&gt; {\n    let data = fuzz_example1::instruction::Invest {\n        amount: self.data.amount,\n    };\n    Ok(data)\n}\n</code></pre>"},{"location":"fuzzing/fuzzing-howto/#specify-instruction-accounts","title":"Specify instruction accounts","text":"<p>Trdelnik fuzzer generates random indexes of accounts to use in each instruction. Each created account is saved in the <code>FuzzAccounts</code> structure which helps you to reuse already existing accounts. You are required to define, how these accounts should be created and which accounts should be passed to an instruction. It is done using the <code>IxOps</code> trait and its method <code>get_accounts</code>. Go to the <code>trdelnik-tests/fuzz_tests/&lt;FUZZ_TEST_NAME&gt;/fuzz_instructions.rs</code> file and complete the pre-generated <code>get_accounts</code> methods for each instruction such as:</p> <p><pre><code>fn get_accounts(\n    &amp;self,\n    client: &amp;mut impl FuzzClient,\n    fuzz_accounts: &amp;mut FuzzAccounts,\n) -&gt; Result&lt;(Vec&lt;Keypair&gt;, Vec&lt;AccountMeta&gt;), FuzzingError&gt; {\n    let author = fuzz_accounts.author.get_or_create_account(\n        self.accounts.author,\n        client,\n        5000000000000,\n    );\n    let signers = vec![author.clone()];\n    let state = fuzz_accounts\n        .state\n        .get_or_create_account(\n            self.accounts.state,\n            &amp;[author.pubkey().as_ref(), STATE_SEED.as_ref()],\n            &amp;fuzz_example1::ID,\n        )\n        .ok_or(FuzzingError::CannotGetAccounts)?\n        .pubkey();\n    let acc_meta = fuzz_example1::accounts::EndRegistration {\n        author: author.pubkey(),\n        state,\n    }\n    .to_account_metas(None);\n    Ok((signers, acc_meta))\n}\n</code></pre> Notice especially the helper method <code>fuzz_accounts.&lt;account_name&gt;.get_or_create_account</code> that is used to create or retrieve a Keypair or public key of an account.</p>"},{"location":"fuzzing/fuzzing-howto/#define-invariants-checks","title":"Define invariants checks","text":"<p>After each successful instruction execution, the <code>check()</code> method is called to check the account data invariants. For each instruction, you can compare the account data before and after the instruction execution such as:</p> <pre><code>fn check(\n    &amp;self,\n    pre_ix: Self::IxSnapshot,\n    post_ix: Self::IxSnapshot,\n    _ix_data: Self::IxData,\n) -&gt; Result&lt;(), &amp;'static str&gt; {\n    if let Some(escrow_pre) = pre_ix.escrow {\n        // we can unwrap the receiver account because it\n        // has to be initialized before the instruction\n        // execution and it is not supposed to be closed\n        // after the instruction execution either\n        let receiver = pre_ix.receiver.unwrap();\n        let receiver_lamports_before = receiver.lamports();\n        let receiver_lamports_after = post_ix.receiver.unwrap().lamports();\n\n        if receiver.key() != escrow_pre.receiver.key()\n            &amp;&amp; receiver_lamports_before &lt; receiver_lamports_after\n        {\n            return Err(\"Un-authorized withdrawal\");\n        }\n    }\n\n    Ok(())\n}\n</code></pre>"},{"location":"fuzzing/fuzzing-howto/#customize-instructions-generation","title":"Customize instructions generation","text":"<p>It is possible to customize how the instructions are generated and which instructions will be executed at the beginning (<code>pre_ixs</code>), in the middle (<code>ixs</code>) and at the end (<code>post_ixs</code>) of each fuzz iteration. This can be useful for example if your program needs an initialization or you want to fuzz some specific program state. Go to the bin target file of your fuzz test and implement the corresponding optional method of the <code>FuzzDataBuilder&lt;FuzzInstruction&gt;</code> trait. For example, in order to always call the <code>initialize</code> instruction for the default fuzz target, modify the trait's implementation in <code>trdelnik-tests/fuzz_tests/&lt;FUZZ_TEST_NAME&gt;/test_fuzz.rs</code> file as follows:</p> <pre><code>impl FuzzDataBuilder&lt;FuzzInstruction&gt; for MyFuzzData {\n    fn pre_ixs(u: &amp;mut arbitrary::Unstructured) -&gt;\n        arbitrary::Result&lt;Vec&lt;FuzzInstruction&gt;&gt; {\n        let init_ix = FuzzInstruction::Initialize(Initialize::arbitrary(u)?);\n        Ok(vec![init_ix])\n    }\n}\n</code></pre>"},{"location":"fuzzing/fuzzing-initialization/","title":"Initialization","text":""},{"location":"fuzzing/fuzzing-initialization/#all-suite-initialization","title":"All-Suite Initialization","text":"<p>To initialize Trdelnik and generate all-suite test templates, navigate to your project's root directory and run</p> <pre><code>trdelnik init\n</code></pre> <p>The command will generate the following folder structure: <pre><code>project-root\n\u251c\u2500\u2500 .program_client\n\u251c\u2500\u2500 trdelnik-tests\n\u2502   \u251c\u2500\u2500 fuzz_tests # fuzz tests folder\n\u2502   \u2502   \u251c\u2500\u2500 fuzz_0 # particular fuzz test\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 accounts_snapshots.rs # generated accounts deserialization methods\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 test_fuzz.rs # the binary target of your fuzz test\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 fuzz_instructions.rs # the definition of your fuzz test\n\u2502   \u2502   \u251c\u2500\u2500 fuzz_1\n\u2502   \u2502   \u251c\u2500\u2500 fuzz_X # possible multiple fuzz tests\n\u2502   \u2502   \u251c\u2500\u2500 fuzzing # compilations and crashes folder\n\u2502   \u2502   \u2514\u2500\u2500 Cargo.toml\n\u2502   \u251c\u2500\u2500 poc_tests # integration tests folder\n\u251c\u2500\u2500 Trdelnik.toml\n\u2514\u2500\u2500 ...\n</code></pre></p>"},{"location":"fuzzing/fuzzing-initialization/#fuzz-test-only-initialization","title":"Fuzz test-only Initialization","text":"<p>If you are interested only in generating templates for fuzz tests run <pre><code>trdelnik init fuzz\n</code></pre></p> <p>The command will generate the following folder structure: <pre><code>project-root\n\u251c\u2500\u2500 trdelnik-tests\n\u2502   \u251c\u2500\u2500 fuzz_tests # fuzz tests folder\n\u2502   \u2502   \u251c\u2500\u2500 fuzz_0 # particular fuzz test\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 accounts_snapshots.rs # generated accounts deserialization methods\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 test_fuzz.rs # the binary target of your fuzz test\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 fuzz_instructions.rs # the definition of your fuzz test\n\u2502   \u2502   \u251c\u2500\u2500 fuzz_1\n\u2502   \u2502   \u251c\u2500\u2500 fuzz_X # possible multiple fuzz tests\n\u2502   \u2502   \u251c\u2500\u2500 fuzzing # compilations and crashes folder\n\u2502   \u2502   \u2514\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 Trdelnik.toml\n\u2514\u2500\u2500 ...\n</code></pre></p>"},{"location":"fuzzing/fuzzing-initialization/#add-new-fuzz-test","title":"Add new Fuzz Test","text":"<p>If you are interested in initializing a new fuzz test run <pre><code>trdelnik fuzz add\n</code></pre></p> <p>The command will generate a new fuzz test as follows: <pre><code>project-root\n\u251c\u2500\u2500 trdelnik-tests\n\u2502   \u251c\u2500\u2500 fuzz_tests # fuzz tests folder\n\u2502   \u2502   \u251c\u2500\u2500 fuzz_X # new fuzz test folder\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 accounts_snapshots.rs # generated accounts deserialization methods\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 test_fuzz.rs # the binary target of your fuzz test\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 fuzz_instructions.rs # the definition of your fuzz test\n\u2502   \u2502   \u251c\u2500\u2500 fuzzing # compilations and crashes folder\n\u2502   \u2502   \u2514\u2500\u2500 Cargo.toml # already present\n\u251c\u2500\u2500 Trdelnik.toml # already present\n\u2514\u2500\u2500 ...\n</code></pre></p>"},{"location":"fuzzing/fuzzing-introduction/","title":"Fuzzing","text":"<p>Fuzzing is a software testing technique that involves providing invalid, unexpected, or random data as inputs to a computer program. The aim is to uncover bugs and vulnerabilities that might not be detected with conventional testing strategies.</p>"},{"location":"fuzzing/fuzzing-introduction/#introduction","title":"Introduction","text":"<p>The <code>Trdelnik</code> testing framework equips developers with tools to efficiently develop fuzz tests for Anchor-based programs. It streamlines the fuzz testing process through automation and comprehensive support:</p> <ul> <li>Automatically parses Anchor-based programs to generate necessary implementations for deserializing instruction accounts.</li> <li>Generates templates for developers to customize according to the specific needs of their fuzz test scenarios.</li> <li>Offers derive macros to effortlessly implement required traits, reducing manual coding efforts.</li> <li>Includes a bank client and helper functions for simplified account management during testing.</li> <li>Provides a Command-Line Interface (CLI) for executing and debugging fuzz tests with ease.</li> </ul> <p><code>Trdelnik</code> is built for customization, enabling developers to tailor their fuzz tests by adjusting:</p> <ul> <li>Execution Order of Instructions: Test different sequences and their effects on the program to uncover sequence-related vulnerabilities.</li> <li>Instruction Parameters: Identify how variations in inputs influence program behavior, testing for robustness against a wide range of data.</li> <li>Instruction Accounts: Explore the impact of different account states on the software's functionality, ensuring comprehensive account testing.</li> <li>Comprehensive Testing: Conduct thorough and effective fuzz testing by combining any of the above aspects.</li> </ul> <p>This framework supports a detailed and methodical approach to fuzz testing, facilitating the identification and remediation of potential vulnerabilities in software applications.</p>"},{"location":"fuzzing/fuzzing-lifecycle/","title":"Fuzz Test Lifecycle","text":"<p>In the sequence diagram below you can see a simplified fuzz test lifecycle.</p> <p>Some diagram states are labeled with emojis:</p> <ul> <li>\u26a1 Mandatory methods that must be implemented by the user.</li> <li>\ud83d\udc64 Optional methods that can be implemented by the user.</li> </ul>"},{"location":"fuzzing/fuzzing-lifecycle/#lifecycle","title":"Lifecycle","text":"<ol> <li>The fuzzer is running until:<ol> <li>The maximal number of iterations is reached (if specified).</li> <li>A crash was detected and the <code>exit_upon_crash</code> parameter was set.</li> <li>User interrupted the test manually (for example by hitting <code>CTRL+C</code>).</li> </ol> </li> <li>In each iteration, the fuzzer generates a sequence of random instructions to execute.<ol> <li>User can optionally customize how the instructions are generated and can specify the instructions that should be executed at the beginning (<code>pre_ixs</code>), in the middle (<code>ixs</code>) and at the end (<code>post_ixs</code>) of each iteration. This can be useful for example if your program needs an initialization or you want to fuzz some specific program state.</li> </ol> </li> <li>For each instruction:<ol> <li>User defined mandatory method <code>get_accounts()</code> is called to collect necessary instruction accounts.</li> <li>User defined mandatory method <code>get_data()</code> is called to collect instruction data.</li> <li>A snapshot of all instruction accounts before the instruction execution is saved.</li> <li>The instruction is executed.</li> <li>A snapshot of all instruction accounts after the instruction execution is saved.</li> <li>User defined optional method <code>check()</code> is called to check accounts data and evaluate invariants.</li> </ol> </li> </ol>"},{"location":"fuzzing/fuzzing-run-debug/","title":"Run and Debug","text":"<p>Once you have finished the implementation of <code>get_accounts</code> and <code>get_data</code> methods (see below), you can run the fuzz test as follows:</p> <pre><code># Replace &lt;TARGET_NAME&gt; with the name of particular fuzz test (for example: \"fuzz_0\")\ntrdelnik fuzz run &lt;TARGET_NAME&gt;\n</code></pre> <p>To debug your fuzz target crash with parameters from a crash file:</p> <pre><code>trdelnik fuzz run-debug &lt;TARGET_NAME&gt; &lt;CRASH_FILE_PATH&gt;\n</code></pre> <p>Under the hood Trdelnik uses honggfuzz-rs. You can pass supported parameters via the Trdelnik.toml configuration file. For example:</p> <pre><code># Content of Trdelnik.toml\n[fuzz]\ntimeout = 10 # Timeout in seconds\niterations = 1000 # Number of fuzzing iterations\nexit_upon_crash = true # Stop the fuzzer upon crash.\n</code></pre> <p>Or you can pass any parameter via environment variables. A list of hongfuzz parameters can be found in honggfuzz usage documentation. The parameters passed via environment variables have higher priority. For example:</p> <pre><code># Time-out: 10 secs\n# Number of concurrent fuzzing threads: 1\n# Number of fuzzing iterations: 10000\n# Display Solana logs in the terminal\nHFUZZ_RUN_ARGS=\"-t 10 -n 1 -N 10000 -Q\" trdelnik fuzz run &lt;TARGET_NAME&gt;\n</code></pre>"},{"location":"home/CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning (SemVer).</p> <p>Note: Version 0 of Semantic Versioning is handled differently from version 1 and above. The minor version will be incremented upon a breaking change and the patch version will be incremented for features.</p>"},{"location":"home/CHANGELOG/#unreleased","title":"[Unreleased]","text":""},{"location":"home/CHANGELOG/#050-2023-08-28","title":"[0.5.0] - 2023-08-28","text":""},{"location":"home/CHANGELOG/#added","title":"Added","text":"<ul> <li>cli: Added trdelnik subcommand <code>fuzz</code> to run and debug fuzz tests using honggfuzz-rs.</li> <li>cli: Added trdelnik <code>--skip-fuzzer</code> option for <code>init</code> subcommand to skip generation of fuzz test templates.</li> <li>client: Added new Cargo feature <code>fuzzing</code> that enables optional dependencies related to fuzz testing.</li> </ul>"},{"location":"home/CHANGELOG/#041-2023-08-21","title":"[0.4.1] - 2023-08-21","text":""},{"location":"home/CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Upgrade Solana (<code>=1.16.6</code>) and Anchor framework (<code>=0.28.0</code>) versions.</li> </ul>"},{"location":"home/CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Implemented Anchor Client logic was not able to work with newer version of Anchor. Fixed with <code>async_rpc</code> and <code>async</code> feature.</li> <li>Trdelnik init IDL Parse Error on newer version of Rust, fixed with updated <code>accounts</code> token.</li> </ul>"},{"location":"home/CHANGELOG/#030-2022-09-23","title":"[0.3.0] - 2022-09-23","text":""},{"location":"home/CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Upgrade Solana (<code>~1.10</code>) and Anchor framework (<code>~0.25</code>) versions</li> </ul>"},{"location":"home/CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Custom Solana RPC error reporter. If the Solana RPC error is thrown, the error code, message and data (logs) are reported to the output.</li> <li>Custom imports in the <code>.program_client</code>. User is able to import custom types and structures into program client. The import part of the code would not be re-generated.</li> </ul>"},{"location":"home/CHANGELOG/#020-2022-07-27","title":"[0.2.0] - 2022-07-27","text":""},{"location":"home/CHANGELOG/#added_2","title":"Added","text":"<ul> <li>Trdelnik is now configurable. This requires <code>Trdelnik.toml</code> file to exist in the project's root directory - without this file the execution will fail. To solve this re-run <code>trdelnik init</code> or just create an empty <code>Trdelnik.toml</code> file in the project's root directory.</li> </ul>"},{"location":"home/CODE_OF_CONDUCT/","title":"Code of Conduct","text":"<p>Our company values guide us in our day-to-day interactions and decision-making. Our open source projects are no exception. Trust, respect, and collaboration are core values, and we believe they should live and breathe within our projects. Our community welcomes participants from around the world with different experiences, unique perspectives, and great ideas to share.</p>"},{"location":"home/CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of the fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion or sexual identity and orientation.</p>"},{"location":"home/CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Attempting collaboration before conflict</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>Violence, threats of violence, or inciting others to commit self-harm</li> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances</li> <li>Trolling, intentionally spreading misinformation, insulting / derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic address, without explicit permission</li> <li>Abuse of the reporting process to intentionally harass or exclude others</li> <li>Advocating for or encouraging any of the above behavior</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"home/CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, comment, or reject any commits, issues, and other contributions that are not aligned to this Code of Conduct or temporarily or permanently ban any contributor for inappropriate, threatening, offensive, or harmful behaviour.</p>"},{"location":"home/CONTRIBUTING/","title":"Contributing","text":"<p>Welcome and thank you for considering contributing to Trdelnik open source!</p> <p>Reading and following these guidelines will help us make the contribution process easy and effective for everyone involved. It also communicates that you agree to respect the time of developers managing and developing the Trdelnik project. In return, we will reciprocate that respect by addressing your issue, assessing changes and helping you finalize your PRs.</p>"},{"location":"home/CONTRIBUTING/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Code of Conduct</li> <li>Getting Started</li> <li>Issues</li> <li>PRs</li> <li>Getting Help</li> </ul>"},{"location":"home/CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>We take our open source and community seriously and hold ourselves and other contributors to high communication standards. By participating and contributing to this project, you agree to uphold our Code of Conduct.</p>"},{"location":"home/CONTRIBUTING/#getting-started","title":"Getting Started","text":"<p>Contributors are made to this repository via issues and pull requests (PRs). A few general guidelines that cover both:</p> <ul> <li>Search for existing issues and pull requests before creating your own</li> <li>We work hard to ensure issues are handled promptly but depending on the impact, it could take a while to investigate the root cause. A friendly ping in the comment thread to the submitter or a contributor can help draw attention if your issue is blocked.</li> <li>If you have never contributed before, see the First contribution guideline and the Open source guide for resources and tips on how to get started</li> </ul>"},{"location":"home/CONTRIBUTING/#issues","title":"Issues","text":"<p>Issues should be used to report problems with the library, request a new feature, or discuss potential changes before a PR is created.</p> <p>If you find an issue that addresses your problem, please add your reproduction information to the existing issue rather than creating a new one. Adding a reaction can also help indicate to our maintainers that a particular problem is affecting more than just the reporter.</p> <p>So, to wrap it up:</p> <ul> <li>Search for an existing issue before you create your own</li> <li>Create an issue before you create a new PR</li> <li>Describe your problems or needs as good as you can</li> <li>If you are reporting a bug, do not forget to add steps to reproduce, versions (Rust and Trdelnik), a full error message, or describe the bad behaviour that happened</li> <li>If possible, do your own investigation and describe how to fix the problem / what is the problem / how to implement it or improve it</li> </ul>"},{"location":"home/CONTRIBUTING/#prs","title":"PRs","text":"<p>PRs to our project are always welcome! It can be a quick way to get your fix or improvement slated for the next release. In general, PRs should:</p> <ul> <li>Only fix or add the functionality in question or address wide-spread whitespace / style issues, not both</li> <li>Add unit or integration tests for fixed or changed functionality (if a test suite already exists)</li> <li>Address a single concern in the least number of changed lines as possible</li> <li>Include documentation in the repository or on our docs site</li> <li>Rebase instead of merge</li> </ul> <p>For changes that address core functionality or would require breaking changes (e.g. a major release), it is best to open an issue to discuss your proposal first. It would be really nice to do it because it can save time creating and reviewing changes.</p> <p>In general, we follow the Fork-and-pull Git workflow:</p> <ol> <li>Fork the repository to your own GitHub account</li> <li>Clone the project to your machine</li> <li>Create a branch locally with a succinct but descriptive name</li> <li>Commit changes to the branch</li> <li>Following any formatting and testing guidelines specific for this repository</li> <li>Push changes to your fork</li> <li>Open a PR in our repository and add reviewers</li> </ol> <p>So, to wrap it up:</p> <ul> <li>Follow our naming and commit conventions</li> <li>Use the emojis from gitmoji at the beginning of the commit message, see our commit messages</li> <li>Add link to the issue at the end of the commit message</li> <li>For example: <code>\u2728 split test command into build and test - #1, #2</code></li> <li>Do not modify files that are not related to the issue you are working on</li> <li>If you want to improve formatting, methods, and the other files that are not related to the issue, please create a new issue and do the changes in a new branch / PR</li> <li>Do not forget to add maintainers as reviewers (at least one of them) to your PRs</li> <li>@ikrk</li> <li>@lukacan</li> </ul>"},{"location":"home/CONTRIBUTING/#getting-help","title":"Getting Help","text":"<p>Join us in the Ackee Blockchain Discord and post your question there.</p>"},{"location":"home/LICENSE/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2021 Ackee Blockchain</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"home/home-installation/","title":"Installation","text":""},{"location":"home/home-installation/#dependencies","title":"Dependencies","text":"<p>Check supported versions section for further details.</p> <ul> <li>Install Rust</li> <li>Install Solana tool suite</li> <li>Install Anchor</li> <li>Install Honggfuzz-rs for fuzz testing</li> </ul>"},{"location":"home/home-installation/#installation","title":"Installation","text":"<pre><code>cargo install trdelnik-cli\n\n# or the specific version\n\ncargo install --version &lt;version&gt; trdelnik-cli\n</code></pre>"},{"location":"home/home-installation/#supported-versions","title":"Supported versions","text":"<ul> <li>We support <code>Anchor</code> and <code>Solana</code> versions specified in the table below.</li> </ul> Trdelnik CLI Anchor Solana Rust <code>v0.6.0</code> <code>~0.29.*</code> <code>&lt;1.18</code> <code>nightly-2023-12-28</code> <code>v0.5.0</code> <code>~0.28.*</code> <code>=1.16.6</code> <code>v0.4.0</code> <code>~0.27.*</code> <code>&gt;=1.15</code> <code>v0.3.0</code> <code>~0.25.*</code> <code>&gt;=1.10</code> <code>v0.2.0</code> <code>~0.24.*</code> <code>&gt;=1.9</code>"},{"location":"integration-tests/integration-tests/","title":"Integration Tests","text":""},{"location":"integration-tests/integration-tests/#how-to-write-tests","title":"How to write tests?","text":"<p>Trdelnik also supports writing integration tests in Rust.</p> <pre><code>// &lt;my_project&gt;/trdelnik-tests/poc_tests/tests/test.rs\n// TODO: do not forget to add all necessary dependencies to the generated `trdelnik-tests/poc_tests/Cargo.toml`\nuse program_client::my_instruction;\nuse trdelnik_client::*;\nuse my_program;\n\n#[throws]\n#[fixture]\nasync fn init_fixture() -&gt; Fixture {\n  // create a test fixture\n  let mut fixture = Fixture {\n    client: Client::new(system_keypair(0)),\n    // make sure to pass the correct name of your program\n    program: anchor_keypair(\"my_program_name\").unwrap(),\n    state: keypair(42),\n  };\n  // deploy the program to test\n  fixture.deploy().await?;\n  // call instruction init\n  my_instruction::initialize(\n    &amp;fixture.client,\n    fixture.state.pubkey(),\n    fixture.client.payer().pubkey(),\n    System::id(),\n    Some(fixture.state.clone()),\n  ).await?;\n  fixture\n}\n\n#[trdelnik_test]\nasync fn test_happy_path(#[future] init_fixture: Result&lt;Fixture&gt;) {\n  let fixture = init_fixture.await?;\n  // call the instruction\n  my_instruction::do_something(\n    &amp;fixture.client,\n    \"dummy_string\".to_owned(),\n    fixture.state.pubkey(),\n    None,\n  ).await?;\n  // check the test result\n  let state = fixture.get_state().await?;\n  assert_eq!(state.something_changed, \"yes\");\n}\n</code></pre>"},{"location":"integration-tests/integration-tests/#instructions-with-custom-structures","title":"Instructions with custom structures","text":"<ul> <li>If you want to test an instruction which has custom structure as an argument</li> </ul> <pre><code>pub struct MyStruct {\n  amount: u64,\n}\n\n// ...\n\npub fn my_instruction(ctx: Context&lt;Ctx&gt;, data: MyStruct) { /* ... */ }\n</code></pre> <ul> <li>You should add an import to the <code>.program_client</code> crate</li> </ul> <pre><code>// .program_client/src/lib.rs\n\n// DO NOT EDIT - automatically generated file\npub mod my_program_instruction {\n  use trdelnik_client::*;\n  use my_program::MyStruct; // add this import\n\n// ...\n}\n</code></pre> <ul> <li>This file is automatically generated but the <code>use</code> statements won't be regenerated</li> </ul>"},{"location":"integration-tests/integration-tests/#skipping-tests","title":"Skipping tests","text":"<ul> <li>You can add the <code>#[ignore]</code> macro to skip the test.</li> </ul> <pre><code>#[trdelnik_test]\n#[ignore]\nasync fn test() {}\n</code></pre>"},{"location":"integration-tests/integration-tests/#testing-programs-with-associated-token-accounts","title":"Testing programs with associated token accounts","text":"<ul> <li><code>Trdelnik</code> does not export <code>anchor-spl</code> and <code>spl-associated-token-account</code>, so you have to add it manually.</li> </ul> <pre><code># &lt;my-project&gt;/trdelnik-tests/poc_tests/Cargo.toml\n# import the correct versions manually\nanchor-spl = \"0.28.0\"\nspl-associated-token-account = \"2.0.0\"\n</code></pre> <pre><code>// &lt;my-project&gt;/trdelnik-tests/poc_tests/tests/test.rs\nuse anchor_spl::token::Token;\nuse spl_associated_token_account;\n\nasync fn init_fixture() -&gt; Fixture {\n  // ...\n  let account = keypair(1);\n  let mint = keypair(2);\n  // constructs a token mint\n  client\n    .create_token_mint(&amp;mint, mint.pubkey(), None, 0)\n    .await?;\n  // constructs associated token account\n  let token_account = client\n    .create_associated_token_account(&amp;account, mint.pubkey())\n    .await?;\n  let associated_token_program = spl_associated_token_account::id();\n  // derives the associated token account address for the given wallet and mint\n  let associated_token_address = spl_associated_token_account::get_associated_token_address(&amp;account.pubkey(), mint);\n  Fixture {\n    // ...\n    token_program: Token::id(),\n  }\n}\n</code></pre> <ul> <li>The <code>trdelnik init</code> command generated a dummy test suite for you.</li> <li>For more details, see the complete test implementation.</li> </ul>"}]}